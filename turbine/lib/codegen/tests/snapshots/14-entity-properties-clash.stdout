localhost_3000/alice/entity/country.rs

use blockprotocol::{
    entity::Entity, EntityType, EntityTypeMut, EntityTypeRef, GenericEntityError,
    PropertyType as _, Type, TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::{Report, Result};
use hashbrown::HashMap;
use serde::Serialize;

use crate::localhost_3000::alice::property::properties::Properties as Properties0;
#[derive(Debug, Clone, Serialize)]
pub struct Properties {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/properties/")]
    pub properties: Properties0,
}
impl Properties {
    fn try_from_value(properties: HashMap<BaseUrl, Value>) -> Result<Self, GenericEntityError> {
        let properties = 'property: {
            let value =
                properties.remove("http://localhost:3000/@alice/types/property-type/properties/");
            let Some (value) = value else { break 'property Err (Report :: new (GenericEntityError :: ExpectedProperty ("http://localhost:3000/@alice/types/property-type/properties/"))) ; } ;
            let value = <Properties0>::try_from_value(value).change_context(Report::new(
                GenericEntityError::Property(
                    "http://localhost:3000/@alice/types/property-type/properties/",
                ),
            ));
            value
        };
        let __report0 = blockprotocol::fold_tuple_reports((properties,));
        let ((properties,),) = blockprotocol::fold_tuple_reports((__report0,))?;
        let this = Self { properties };
        Ok(this)
    }
}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct Country {
    pub properties: Properties,
}
pub type CountryV1 = Country;
impl Type for Country {
    type Mut < 'a > = CountryMut < 'a > where Self : 'a ;
    type Ref < 'a > = CountryRef < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/entity-type/country/" / v / 1u32);

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }
}
impl EntityType for Country {
    type Error = GenericEntityError;

    fn try_from_entity(value: Entity) -> Option<Result<Self, Self::Error>> {
        if Self::ID == *value.id() {
            return None;
        }
        let properties = Properties::try_from_value(value.properties.0);
        let (properties,) = blockprotocol::fold_tuple_reports((properties,))?;
        let this = Self { properties };
        Ok(this)
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct PropertiesRef<'a> {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/properties/")]
    pub properties: Properties0::Ref<'a>,
}
impl PropertiesRef<'a> {
    fn try_from_value(properties: &'a HashMap<BaseUrl, Value>) -> Result<Self, GenericEntityError> {
        let properties = 'property: {
            let value =
                properties.get("http://localhost:3000/@alice/types/property-type/properties/");
            let Some (value) = value else { break 'property Err (Report :: new (GenericEntityError :: ExpectedProperty ("http://localhost:3000/@alice/types/property-type/properties/"))) ; } ;
            let value = <Properties0::Ref<'a>>::try_from_value(value).change_context(Report::new(
                GenericEntityError::Property(
                    "http://localhost:3000/@alice/types/property-type/properties/",
                ),
            ));
            value
        };
        let __report0 = blockprotocol::fold_tuple_reports((properties,));
        let ((properties,),) = blockprotocol::fold_tuple_reports((__report0,))?;
        let this = Self { properties };
        Ok(this)
    }
}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct CountryRef<'a> {
    pub properties: PropertiesRef<'a>,
}
pub type CountryV1Ref<'a> = CountryRef<'a>;
impl TypeRef for CountryRef<'_> {
    type Owned = Country;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> EntityTypeRef<'a> for CountryRef<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a Entity) -> Option<Result<Self, Self::Error>> {
        if Self::ID == *value.id() {
            return None;
        }
        let properties = Properties::try_from_value(&value.properties.0);
        let (properties,) = blockprotocol::fold_tuple_reports((properties,))?;
        let this = Self { properties };
        Ok(this)
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct PropertiesMut<'a> {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/properties/")]
    pub properties: Properties0::Mut<'a>,
}
impl PropertiesMut<'a> {
    fn try_from_value(
        properties: &'a mut HashMap<BaseUrl, Value>,
    ) -> Result<Self, GenericEntityError> {
        let properties = 'property: {
            let value = unsafe {
                let value = properties
                    .get_mut("http://localhost:3000/@alice/types/property-type/properties/");
                let value = value.map(|value| value as *mut _);
                &mut *value
            };
            let Some (value) = value else { break 'property Err (Report :: new (GenericEntityError :: ExpectedProperty ("http://localhost:3000/@alice/types/property-type/properties/"))) ; } ;
            let value = <Properties0::Mut<'a>>::try_from_value(value).change_context(Report::new(
                GenericEntityError::Property(
                    "http://localhost:3000/@alice/types/property-type/properties/",
                ),
            ));
            value
        };
        let __report0 = blockprotocol::fold_tuple_reports((properties,));
        let ((properties,),) = blockprotocol::fold_tuple_reports((__report0,))?;
        let this = Self { properties };
        Ok(this)
    }
}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct CountryMut<'a> {
    pub properties: PropertiesMut<'a>,
}
pub type CountryV1Mut<'a> = CountryMut<'a>;
impl TypeMut for CountryMut<'_> {
    type Owned = Country;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> EntityTypeMut<'a> for CountryMut<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a mut Entity) -> Option<Result<Self, Self::Error>> {
        if Self::ID == *value.id() {
            return None;
        }
        let properties = Properties::try_from_value(&mut value.properties.0);
        let (properties,) = blockprotocol::fold_tuple_reports((properties,))?;
        let this = Self { properties };
        Ok(this)
    }
}


---

localhost_3000/alice/property/properties.rs

use blockprotocol::{
    types::data::Text, DataType as _, GenericEntityError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::Result;
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct Properties(pub Text);
impl Type for Properties {
    type Mut < 'a > = PropertiesMut < 'a > where Self : 'a ;
    type Ref < 'a > = PropertiesRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for Properties {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        todo!()
    }
}
pub type PropertiesV1<'a> = Properties<'a>;
#[derive(Debug, Clone, Serialize)]
pub struct PropertiesRef<'a>(pub Text::Ref<'a>);
impl TypeRef for PropertiesRef<'_> {
    type Owned = Properties;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for PropertiesRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        todo!()
    }
}
pub type PropertiesV1Ref<'a> = PropertiesRef<'a>;
#[derive(Debug, Serialize)]
pub struct PropertiesMut<'a>(pub Text::Mut<'a>);
impl TypeMut for PropertiesMut<'_> {
    type Owned = Properties;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for PropertiesMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        todo!()
    }
}
pub type PropertiesV1Mut<'a> = PropertiesMut<'a>;
