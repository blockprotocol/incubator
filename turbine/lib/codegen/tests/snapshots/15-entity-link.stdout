localhost_3000/alice/entity/part_of.rs

use blockprotocol::{
    entity::{Entity, LinkData},
    EntityType, EntityTypeMut, EntityTypeRef, GenericEntityError, PropertyType as _, Type, TypeMut,
    TypeRef, VersionedUrlRef,
};
use error_stack::{Report, Result};
use hashbrown::HashMap;
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct Properties {}
impl Properties {
    fn try_from_value(properties: HashMap<BaseUrl, Value>) -> Result<Self, GenericEntityError> {
        let () = blockprotocol::fold_reports(())?;
        Ok(Self {})
    }
}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct PartOf {
    pub properties: Properties,
    pub link_data: LinkData,
}
impl Type for PartOf {
    type Mut < 'a > = PartOfMut < 'a > where Self : 'a ;
    type Ref < 'a > = PartOfRef < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/entity-type/partOf/" / v / 1u32);

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }

    fn as_mut(&self) -> Self::Mut<'_> {
        todo!()
    }
}
impl EntityType for PartOf {
    type Error = GenericEntityError;

    fn try_from_entity(value: Entity) -> Option<Result<Self, Self::Error>> {
        if Self::ID != *value.id() {
            return None;
        }
        Some(Ok(Self {
            properties: Properties::try_from_value(value.properties)?,
            link_data: entity
                .link_data
                .ok_or_else(|| Report::new(GenericEntityError::ExpectedLinkData))?,
        }))
    }
}
pub type PartOfV1 = PartOf;
#[derive(Debug, Clone, Serialize)]
pub struct PropertiesRef<'a> {}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct PartOfRef<'a> {
    pub properties: PropertiesRef<'a>,
    pub link_data: &'a LinkData,
}
impl TypeRef for PartOfRef<'_> {
    type Owned = PartOf;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> EntityTypeRef<'a> for PartOfRef<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a Entity) -> Option<Result<Self, Self::Error>> {
        todo!()
    }
}
pub type PartOfV1Ref<'a> = PartOfRef<'a>;
#[derive(Debug, Serialize)]
pub struct PropertiesMut<'a> {}
#[derive(Debug, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct PartOfMut<'a> {
    pub properties: PropertiesMut<'a>,
    pub link_data: &'a mut LinkData,
}
impl TypeMut for PartOfMut<'_> {
    type Owned = PartOf;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> EntityTypeMut<'a> for PartOfMut<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a mut Entity) -> Option<Result<Self, Self::Error>> {
        todo!()
    }
}
pub type PartOfV1Mut<'a> = PartOfMut<'a>;
