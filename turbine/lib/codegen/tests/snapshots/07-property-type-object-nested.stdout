blockprotocol/blockprotocol/property/favorite_film.rs

use blockprotocol::{
    types::data::Text, DataType as _, GenericEntityError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::Result;
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct FavoriteFilm(pub Text);
impl Type for FavoriteFilm {
    type Mut < 'a > = FavoriteFilmMut < 'a > where Self : 'a ;
    type Ref < 'a > = FavoriteFilmRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for FavoriteFilm {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteFilmV1<'a> = FavoriteFilm<'a>;
#[derive(Debug, Clone, Serialize)]
pub struct FavoriteFilmRef<'a>(pub Text::Ref<'a>);
impl TypeRef for FavoriteFilmRef<'_> {
    type Owned = FavoriteFilm;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for FavoriteFilmRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Ref<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteFilmV1Ref<'a> = FavoriteFilmRef<'a>;
#[derive(Debug, Serialize)]
pub struct FavoriteFilmMut<'a>(pub Text::Mut<'a>);
impl TypeMut for FavoriteFilmMut<'_> {
    type Owned = FavoriteFilm;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for FavoriteFilmMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Mut<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteFilmV1Mut<'a> = FavoriteFilmMut<'a>;


---

blockprotocol/blockprotocol/property/favorite_song.rs

use blockprotocol::{
    types::data::Text, DataType as _, GenericEntityError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::Result;
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct FavoriteSong(pub Text);
impl Type for FavoriteSong {
    type Mut < 'a > = FavoriteSongMut < 'a > where Self : 'a ;
    type Ref < 'a > = FavoriteSongRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for FavoriteSong {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteSongV1<'a> = FavoriteSong<'a>;
#[derive(Debug, Clone, Serialize)]
pub struct FavoriteSongRef<'a>(pub Text::Ref<'a>);
impl TypeRef for FavoriteSongRef<'_> {
    type Owned = FavoriteSong;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for FavoriteSongRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Ref<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteSongV1Ref<'a> = FavoriteSongRef<'a>;
#[derive(Debug, Serialize)]
pub struct FavoriteSongMut<'a>(pub Text::Mut<'a>);
impl TypeMut for FavoriteSongMut<'_> {
    type Owned = FavoriteSong;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for FavoriteSongMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Mut<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type FavoriteSongV1Mut<'a> = FavoriteSongMut<'a>;


---

blockprotocol/blockprotocol/property/hobby.rs

use blockprotocol::{
    types::data::Text, DataType as _, GenericEntityError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::Result;
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct Hobby(pub Text);
impl Type for Hobby {
    type Mut < 'a > = HobbyMut < 'a > where Self : 'a ;
    type Ref < 'a > = HobbyRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for Hobby {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type HobbyV1<'a> = Hobby<'a>;
#[derive(Debug, Clone, Serialize)]
pub struct HobbyRef<'a>(pub Text::Ref<'a>);
impl TypeRef for HobbyRef<'_> {
    type Owned = Hobby;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for HobbyRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Ref<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type HobbyV1Ref<'a> = HobbyRef<'a>;
#[derive(Debug, Serialize)]
pub struct HobbyMut<'a>(pub Text::Mut<'a>);
impl TypeMut for HobbyMut<'_> {
    type Owned = Hobby;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for HobbyMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Mut<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type HobbyV1Mut<'a> = HobbyMut<'a>;


---

https_blockprotocol_org_alice_property_type_interests.rs

use alloc::{boxed::Box, vec::Vec};

use blockprotocol::{
    DataType as _, GenericEntityError, PropertyType, PropertyTypeMut, PropertyTypeRef, Type,
    TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::Result;
use serde::Serialize;

use crate::blockprotocol::blockprotocol::property::{
    favorite_film::FavoriteFilm, favorite_song::FavoriteSong, hobby::Hobby,
};
#[derive(Debug, Clone, Serialize)]
pub struct Interests {
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/"
    )]
    pub favorite_film: Option<FavoriteFilm>,
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/"
    )]
    pub favorite_song: Option<FavoriteSong>,
    #[serde(rename = "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/")]
    pub hobby: Option<Vec<Hobby>>,
}
impl Type for Interests {
    type Mut < 'a > = InterestsMut < 'a > where Self : 'a ;
    type Ref < 'a > = InterestsRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for Interests {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let favorite_film = 'property: {
                let value = properties.remove(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                );
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <FavoriteFilm>::try_from_value(value)
                    .change_context(Report::new(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                )));
                value.map(Some)
            };
            let favorite_song = 'property: {
                let value = properties.remove(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                );
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <FavoriteSong>::try_from_value(value)
                    .change_context(Report::new(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                )));
                value.map(Some)
            };
            let hobby = 'property: {
                let value = properties
                    .remove("https://blockprotocol.org/@blockprotocol/types/property-type/hobby/");
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = if let serde_json::Value::Array(value) = value {
                    blockprotocol::fold_iter_reports(
                        value
                            .into_iter()
                            .map(|value| <Hobby>::try_from_value(value)),
                    )
                    .change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    ))
                } else {
                    Err(Report::new(GenericPropertyError::ExpectedArray(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    )))
                };
                value.map(Some)
            };
            let __report0 =
                blockprotocol::fold_tuple_reports((favorite_film, favorite_song, hobby));
            let ((favorite_film, favorite_song, hobby),) =
                blockprotocol::fold_tuple_reports((__report0,))?;
            let this = Self {
                favorite_film,
                favorite_song,
                hobby,
            };
            Ok(this)
        }
    }
}
pub type InterestsV1<'a> = Interests<'a>;
#[derive(Debug, Clone, Serialize)]
pub struct InterestsRef<'a> {
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/"
    )]
    pub favorite_film: Option<FavoriteFilm::Ref<'a>>,
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/"
    )]
    pub favorite_song: Option<FavoriteSong::Ref<'a>>,
    #[serde(rename = "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/")]
    pub hobby: Option<Box<[Hobby::Ref<'a>]>>,
}
impl TypeRef for InterestsRef<'_> {
    type Owned = Interests;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for InterestsRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let favorite_film = 'property: {
                let value = properties.get(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                );
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <FavoriteFilm::Ref<'a>>::try_from_value(value)
                    .change_context(Report::new(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                )));
                value.map(Some)
            };
            let favorite_song = 'property: {
                let value = properties.get(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                );
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <FavoriteSong::Ref<'a>>::try_from_value(value)
                    .change_context(Report::new(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                )));
                value.map(Some)
            };
            let hobby = 'property: {
                let value = properties
                    .get("https://blockprotocol.org/@blockprotocol/types/property-type/hobby/");
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = if let serde_json::Value::Array(value) = value {
                    blockprotocol::fold_iter_reports(
                        value
                            .into_iter()
                            .map(|value| <Hobby::Ref<'a>>::try_from_value(value)),
                    )
                    .change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    ))
                } else {
                    Err(Report::new(GenericPropertyError::ExpectedArray(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    )))
                };
                value.map(Some)
            };
            let __report0 =
                blockprotocol::fold_tuple_reports((favorite_film, favorite_song, hobby));
            let ((favorite_film, favorite_song, hobby),) =
                blockprotocol::fold_tuple_reports((__report0,))?;
            let this = Self {
                favorite_film,
                favorite_song,
                hobby,
            };
            Ok(this)
        }
    }
}
pub type InterestsV1Ref<'a> = InterestsRef<'a>;
#[derive(Debug, Serialize)]
pub struct InterestsMut<'a> {
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/"
    )]
    pub favorite_film: Option<FavoriteFilm::Mut<'a>>,
    #[serde(
        rename = "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/"
    )]
    pub favorite_song: Option<FavoriteSong::Mut<'a>>,
    #[serde(rename = "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/")]
    pub hobby: Option<Vec<Hobby::Mut<'a>>>,
}
impl TypeMut for InterestsMut<'_> {
    type Owned = Interests;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for InterestsMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let favorite_film = 'property: {
                let value = unsafe {
                    let value = properties . get_mut ("https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/") ;
                    let value = value.map(|value| value as *mut _);
                    &mut *value
                };
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <FavoriteFilm::Mut<'a>>::try_from_value(value)
                    .change_context(Report::new(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-film/",
                )));
                value.map(Some)
            };
            let favorite_song = 'property: {
                let value = unsafe {
                    let value = properties . get_mut ("https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/") ;
                    let value = value.map(|value| value as *mut _);
                    &mut *value
                };
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <FavoriteSong::Mut<'a>>::try_from_value(value)
                    .change_context(Report::new(GenericPropertyError::Property(
                    "https://blockprotocol.org/@blockprotocol/types/property-type/favorite-song/",
                )));
                value.map(Some)
            };
            let hobby = 'property: {
                let value = unsafe {
                    let value = properties.get_mut(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    );
                    let value = value.map(|value| value as *mut _);
                    &mut *value
                };
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = if let serde_json::Value::Array(value) = value {
                    blockprotocol::fold_iter_reports(
                        value
                            .into_iter()
                            .map(|value| <Hobby::Mut<'a>>::try_from_value(value)),
                    )
                    .change_context(GenericPropertyError::Property(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    ))
                } else {
                    Err(Report::new(GenericPropertyError::ExpectedArray(
                        "https://blockprotocol.org/@blockprotocol/types/property-type/hobby/",
                    )))
                };
                value.map(Some)
            };
            let __report0 =
                blockprotocol::fold_tuple_reports((favorite_film, favorite_song, hobby));
            let ((favorite_film, favorite_song, hobby),) =
                blockprotocol::fold_tuple_reports((__report0,))?;
            let this = Self {
                favorite_film,
                favorite_song,
                hobby,
            };
            Ok(this)
        }
    }
}
pub type InterestsV1Mut<'a> = InterestsMut<'a>;
