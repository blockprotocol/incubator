localhost_3000/alice/property/country_code.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
#[derive(Debug, Clone, Serialize)]
pub struct CountryCode(pub Text);
impl Type for CountryCode {
    type Mut < 'a > = CountryCodeMut < 'a > where Self : 'a ;
    type Ref < 'a > = CountryCodeRef < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/countryCode/" / v / 1u32);

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for CountryCode {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type CountryCodeV1 = CountryCode;
#[derive(Debug, Clone, Serialize)]
pub struct CountryCodeRef<'a>(pub <Text as Type>::Ref<'a>);
impl TypeRef for CountryCodeRef<'_> {
    type Owned = CountryCode;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for CountryCodeRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type CountryCodeV1Ref<'a> = CountryCodeRef<'a>;
#[derive(Debug, Serialize)]
pub struct CountryCodeMut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeMut for CountryCodeMut<'_> {
    type Owned = CountryCode;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for CountryCodeMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type CountryCodeV1Mut<'a> = CountryCodeMut<'a>;
