localhost_3000/alice/property/full_email.rs

use blockprotocol::{
    DataType as _, GenericEntityError, PropertyType, PropertyTypeMut, PropertyTypeRef, Type,
    TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::Result;
use serde::Serialize;

use crate::localhost_3000::alice::property::{
    primary_email::PrimaryEmail, secondary_email::SecondaryEmail,
};
#[derive(Debug, Clone, Serialize)]
pub struct FullEmail {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/primaryEmail/")]
    pub primary_email: PrimaryEmail,
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/secondaryEmail/")]
    pub secondary_email: Option<SecondaryEmail>,
}
impl Type for FullEmail {
    type Mut < 'a > = FullEmailMut < 'a > where Self : 'a ;
    type Ref < 'a > = FullEmailRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for FullEmail {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let primary_email = 'property: {
                let value = properties
                    .remove("http://localhost:3000/@alice/types/property-type/primaryEmail/");
                let Some (value) = value else { break 'property Err (Report :: new (GenericPropertyError :: ExpectedProperty ("http://localhost:3000/@alice/types/property-type/primaryEmail/"))) ; } ;
                let value = <PrimaryEmail>::try_from_value(value).change_context(Report::new(
                    GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/primaryEmail/",
                    ),
                ));
                value
            };
            let secondary_email = 'property: {
                let value = properties
                    .remove("http://localhost:3000/@alice/types/property-type/secondaryEmail/");
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <SecondaryEmail>::try_from_value(value).change_context(Report::new(
                    GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/secondaryEmail/",
                    ),
                ));
                value.map(Some)
            };
            let __report0 = blockprotocol::fold_tuple_reports((primary_email, secondary_email));
            let ((primary_email, secondary_email),) =
                blockprotocol::fold_tuple_reports((__report0,))?;
            let this = Self {
                primary_email,
                secondary_email,
            };
            Ok(this)
        }
    }
}
pub type FullEmailV1<'a> = FullEmail<'a>;
#[derive(Debug, Clone, Serialize)]
pub struct FullEmailRef<'a> {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/primaryEmail/")]
    pub primary_email: PrimaryEmail::Ref<'a>,
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/secondaryEmail/")]
    pub secondary_email: Option<SecondaryEmail::Ref<'a>>,
}
impl TypeRef for FullEmailRef<'_> {
    type Owned = FullEmail;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for FullEmailRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let primary_email = 'property: {
                let value = properties
                    .get("http://localhost:3000/@alice/types/property-type/primaryEmail/");
                let Some (value) = value else { break 'property Err (Report :: new (GenericPropertyError :: ExpectedProperty ("http://localhost:3000/@alice/types/property-type/primaryEmail/"))) ; } ;
                let value = <PrimaryEmail::Ref<'a>>::try_from_value(value).change_context(
                    Report::new(GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/primaryEmail/",
                    )),
                );
                value
            };
            let secondary_email = 'property: {
                let value = properties
                    .get("http://localhost:3000/@alice/types/property-type/secondaryEmail/");
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <SecondaryEmail::Ref<'a>>::try_from_value(value).change_context(
                    Report::new(GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/secondaryEmail/",
                    )),
                );
                value.map(Some)
            };
            let __report0 = blockprotocol::fold_tuple_reports((primary_email, secondary_email));
            let ((primary_email, secondary_email),) =
                blockprotocol::fold_tuple_reports((__report0,))?;
            let this = Self {
                primary_email,
                secondary_email,
            };
            Ok(this)
        }
    }
}
pub type FullEmailV1Ref<'a> = FullEmailRef<'a>;
#[derive(Debug, Serialize)]
pub struct FullEmailMut<'a> {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/primaryEmail/")]
    pub primary_email: PrimaryEmail::Mut<'a>,
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/secondaryEmail/")]
    pub secondary_email: Option<SecondaryEmail::Mut<'a>>,
}
impl TypeMut for FullEmailMut<'_> {
    type Owned = FullEmail;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for FullEmailMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let primary_email = 'property: {
                let value = unsafe {
                    let value = properties
                        .get_mut("http://localhost:3000/@alice/types/property-type/primaryEmail/");
                    let value = value.map(|value| value as *mut _);
                    &mut *value
                };
                let Some (value) = value else { break 'property Err (Report :: new (GenericPropertyError :: ExpectedProperty ("http://localhost:3000/@alice/types/property-type/primaryEmail/"))) ; } ;
                let value = <PrimaryEmail::Mut<'a>>::try_from_value(value).change_context(
                    Report::new(GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/primaryEmail/",
                    )),
                );
                value
            };
            let secondary_email = 'property: {
                let value = unsafe {
                    let value = properties.get_mut(
                        "http://localhost:3000/@alice/types/property-type/secondaryEmail/",
                    );
                    let value = value.map(|value| value as *mut _);
                    &mut *value
                };
                let Some (value) = value else { break 'property Ok (None) ; } ;
                if value.is_null() {
                    break 'property Ok(None);
                };
                let value = <SecondaryEmail::Mut<'a>>::try_from_value(value).change_context(
                    Report::new(GenericPropertyError::Property(
                        "http://localhost:3000/@alice/types/property-type/secondaryEmail/",
                    )),
                );
                value.map(Some)
            };
            let __report0 = blockprotocol::fold_tuple_reports((primary_email, secondary_email));
            let ((primary_email, secondary_email),) =
                blockprotocol::fold_tuple_reports((__report0,))?;
            let this = Self {
                primary_email,
                secondary_email,
            };
            Ok(this)
        }
    }
}
pub type FullEmailV1Mut<'a> = FullEmailMut<'a>;


---

localhost_3000/alice/property/primary_email.rs

use blockprotocol::{
    types::data::Text, DataType as _, GenericEntityError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::Result;
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct PrimaryEmail(pub Text);
impl Type for PrimaryEmail {
    type Mut < 'a > = PrimaryEmailMut < 'a > where Self : 'a ;
    type Ref < 'a > = PrimaryEmailRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for PrimaryEmail {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type PrimaryEmailV1<'a> = PrimaryEmail<'a>;
#[derive(Debug, Clone, Serialize)]
pub struct PrimaryEmailRef<'a>(pub Text::Ref<'a>);
impl TypeRef for PrimaryEmailRef<'_> {
    type Owned = PrimaryEmail;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for PrimaryEmailRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Ref<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type PrimaryEmailV1Ref<'a> = PrimaryEmailRef<'a>;
#[derive(Debug, Serialize)]
pub struct PrimaryEmailMut<'a>(pub Text::Mut<'a>);
impl TypeMut for PrimaryEmailMut<'_> {
    type Owned = PrimaryEmail;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for PrimaryEmailMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Mut<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type PrimaryEmailV1Mut<'a> = PrimaryEmailMut<'a>;


---

localhost_3000/alice/property/secondary_email.rs

use blockprotocol::{
    types::data::Text, DataType as _, GenericEntityError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::Result;
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct SecondaryEmail(pub Text);
impl Type for SecondaryEmail {
    type Mut < 'a > = SecondaryEmailMut < 'a > where Self : 'a ;
    type Ref < 'a > = SecondaryEmailRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for SecondaryEmail {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type SecondaryEmailV1<'a> = SecondaryEmail<'a>;
#[derive(Debug, Clone, Serialize)]
pub struct SecondaryEmailRef<'a>(pub Text::Ref<'a>);
impl TypeRef for SecondaryEmailRef<'_> {
    type Owned = SecondaryEmail;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for SecondaryEmailRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Ref<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type SecondaryEmailV1Ref<'a> = SecondaryEmailRef<'a>;
#[derive(Debug, Serialize)]
pub struct SecondaryEmailMut<'a>(pub Text::Mut<'a>);
impl TypeMut for SecondaryEmailMut<'_> {
    type Owned = SecondaryEmail;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for SecondaryEmailMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value =
                <Text::Mut<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type SecondaryEmailV1Mut<'a> = SecondaryEmailMut<'a>;
