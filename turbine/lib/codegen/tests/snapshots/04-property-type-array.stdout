https_blockprotocol_org_alice_property_type_contrived_property.rs

use alloc::vec::Vec;

use blockprotocol::{
    types::data::Number, DataType as _, GenericEntityError, PropertyType, PropertyTypeMut,
    PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::Result;
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct Inner0(pub Number);
impl Inner0 {
    fn try_from_value(value: serde_json::Value) -> Result<Self, GenericPropertError> {
        {
            let value = <Number>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct Inner1<'a>(pub Number::Ref<'a>);
impl Inner1<'a> {
    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, GenericPropertError> {
        {
            let value =
                <Number::Ref<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
#[derive(Debug, Serialize)]
pub struct Inner2<'a>(pub Number::Mut<'a>);
impl Inner2<'a> {
    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, GenericPropertError> {
        {
            let value =
                <Number::Mut<'a>>::try_from_value(value).change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct ContrivedProperty(pub Vec<Inner0>);
impl Type for ContrivedProperty {
    type Mut < 'a > = ContrivedPropertyMut < 'a > where Self : 'a ;
    type Ref < 'a > = ContrivedPropertyRef < 'a > where Self : 'a ;

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for ContrivedProperty {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            match value {
                serde_json::Value::Array(array) => blockprotocol::fold_iter_reports(
                    array
                        .into_iter()
                        .map(|value| <Inner0>::try_from_value(value)),
                )
                .map(Self)
                .change_context(GenericPropertyError::Array),
                _ => Err(Report::new(GenericPropertyError::ExpectedArray)),
            }
        }
    }
}
pub type ContrivedPropertyV1<'a> = ContrivedProperty<'a>;
#[derive(Debug, Clone, Serialize)]
pub struct ContrivedPropertyRef<'a>(pub Vec<Inner1<'a>>);
impl TypeRef for ContrivedPropertyRef<'_> {
    type Owned = ContrivedProperty;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for ContrivedPropertyRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            match value {
                serde_json::Value::Array(array) => blockprotocol::fold_iter_reports(
                    array
                        .into_iter()
                        .map(|value| <Inner1<'a>>::try_from_value(value)),
                )
                .map(|array| array.into_boxed_slice())
                .map(Self)
                .change_context(GenericPropertyError::Array),
                _ => Err(Report::new(GenericPropertyError::ExpectedArray)),
            }
        }
    }
}
pub type ContrivedPropertyV1Ref<'a> = ContrivedPropertyRef<'a>;
#[derive(Debug, Serialize)]
pub struct ContrivedPropertyMut<'a>(pub Vec<Inner2<'a>>);
impl TypeMut for ContrivedPropertyMut<'_> {
    type Owned = ContrivedProperty;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for ContrivedPropertyMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            match value {
                serde_json::Value::Array(array) => blockprotocol::fold_iter_reports(
                    array
                        .into_iter()
                        .map(|value| <Inner2<'a>>::try_from_value(value)),
                )
                .map(Self)
                .change_context(GenericPropertyError::Array),
                _ => Err(Report::new(GenericPropertyError::ExpectedArray)),
            }
        }
    }
}
pub type ContrivedPropertyV1Mut<'a> = ContrivedPropertyMut<'a>;
