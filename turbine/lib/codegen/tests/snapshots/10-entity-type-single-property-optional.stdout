localhost_3000/alice/entity/country.rs

use alloc::string::String;

use error_stack::{Report, Result, ResultExt as _};
use hashbrown::HashMap;
use serde::Serialize;
use turbine::{
    entity::Entity, url, BaseUrl, EntityType, EntityTypeMut, EntityTypeRef, GenericEntityError,
    PropertyType as _, PropertyTypeMut as _, PropertyTypeRef as _, Type, TypeMut, TypeRef,
    VersionedUrlRef,
};

use crate::localhost_3000::alice::property::name::Name;
///Country
#[derive(Debug, Clone, Serialize)]
pub struct Properties {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/name/")]
    pub name: Option<Name>,
}
impl Properties {
    fn try_from_value(
        mut properties: HashMap<String, serde_json::Value>,
    ) -> Result<Self, GenericEntityError> {
        let name = 'property: {
            let value = properties.remove("http://localhost:3000/@alice/types/property-type/name/");
            let Some (value) = value else { break 'property Ok (None) ; } ;
            if value.is_null() {
                break 'property Ok(None);
            };
            let value = <Name>::try_from_value(value).change_context(GenericEntityError::Property(
                "http://localhost:3000/@alice/types/property-type/name/",
            ));
            value.map(Some)
        };
        let __report0 = turbine::fold_tuple_reports((name,));
        let ((name,),) = turbine::fold_tuple_reports((__report0,))?;
        let this = Self { name };
        Ok(this)
    }

    fn as_mut(&mut self) -> PropertiesMut<'_> {
        let Self { name } = self;
        PropertiesMut {
            name: name.as_mut().map(|name| <Name as Type>::as_mut(name)),
        }
    }

    fn as_ref(&self) -> PropertiesRef<'_> {
        let Self { name } = self;
        PropertiesRef {
            name: name.as_ref().map(|name| <Name as Type>::as_ref(name)),
        }
    }
}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct Country {
    pub properties: Properties,
}
pub type CountryV1 = Country;
impl Type for Country {
    type Mut < 'a > = CountryMut < 'a > where Self : 'a ;
    type Ref < 'a > = CountryRef < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/entity-type/country/" / v / 1u32);

    fn as_mut(&mut self) -> Self::Mut<'_> {
        CountryMut {
            properties: self.properties.as_mut(),
        }
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        CountryRef {
            properties: self.properties.as_ref(),
        }
    }
}
impl EntityType for Country {
    type Error = GenericEntityError;

    fn try_from_entity(value: Entity) -> Option<Result<Self, Self::Error>> {
        if Self::ID == value.metadata.entity_type_id {
            return None;
        }
        let properties = Properties::try_from_value(value.properties.0);
        match turbine::fold_tuple_reports((properties,)) {
            Err(error) => Some(Err(error)),
            Ok((properties,)) => Some(Ok(Self { properties })),
        }
    }
}
///Country
#[derive(Debug, Clone, Serialize)]
pub struct PropertiesRef<'a> {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/name/")]
    pub name: Option<<Name as Type>::Ref<'a>>,
}
impl<'a> PropertiesRef<'a> {
    fn try_from_value(
        properties: &'a HashMap<String, serde_json::Value>,
    ) -> Result<Self, GenericEntityError> {
        let name = 'property: {
            let value = properties.get("http://localhost:3000/@alice/types/property-type/name/");
            let Some (value) = value else { break 'property Ok (None) ; } ;
            if value.is_null() {
                break 'property Ok(None);
            };
            let value = <<Name as Type>::Ref<'a>>::try_from_value(value).change_context(
                GenericEntityError::Property(
                    "http://localhost:3000/@alice/types/property-type/name/",
                ),
            );
            value.map(Some)
        };
        let __report0 = turbine::fold_tuple_reports((name,));
        let ((name,),) = turbine::fold_tuple_reports((__report0,))?;
        let this = Self { name };
        Ok(this)
    }

    fn into_owned(self) -> Properties {
        let Self { name } = self;
        Properties {
            name: name.map(|name| <Name as TypeRef>::into_owned(name)),
        }
    }
}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct CountryRef<'a> {
    pub properties: PropertiesRef<'a>,
}
pub type CountryV1Ref<'a> = CountryRef<'a>;
impl TypeRef for CountryRef<'_> {
    type Owned = Country;

    fn into_owned(self) -> Self::Owned {
        Country {
            properties: self.properties.into_owned(),
        }
    }
}
impl<'a> EntityTypeRef<'a> for CountryRef<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a Entity) -> Option<Result<Self, Self::Error>> {
        if Self::Owned::ID == value.metadata.entity_type_id {
            return None;
        }
        let properties = PropertiesRef::try_from_value(&value.properties.0);
        match turbine::fold_tuple_reports((properties,)) {
            Err(error) => Some(Err(error)),
            Ok((properties,)) => Some(Ok(Self { properties })),
        }
    }
}
///Country
#[derive(Debug, Serialize)]
pub struct PropertiesMut<'a> {
    #[serde(rename = "http://localhost:3000/@alice/types/property-type/name/")]
    pub name: Option<<Name as Type>::Mut<'a>>,
}
impl<'a> PropertiesMut<'a> {
    fn try_from_value(
        properties: &'a mut HashMap<String, serde_json::Value>,
    ) -> Result<Self, GenericEntityError> {
        let name = 'property: {
            let value = unsafe {
                let value =
                    properties.get_mut("http://localhost:3000/@alice/types/property-type/name/");
                let value = value.map(|value| value as *mut _);
                value.map(|value: *mut serde_json::Value| &mut *value)
            };
            let Some (value) = value else { break 'property Ok (None) ; } ;
            if value.is_null() {
                break 'property Ok(None);
            };
            let value = <<Name as Type>::Mut<'a>>::try_from_value(value).change_context(
                GenericEntityError::Property(
                    "http://localhost:3000/@alice/types/property-type/name/",
                ),
            );
            value.map(Some)
        };
        let __report0 = turbine::fold_tuple_reports((name,));
        let ((name,),) = turbine::fold_tuple_reports((__report0,))?;
        let this = Self { name };
        Ok(this)
    }

    fn into_owned(self) -> Properties {
        let Self { name } = self;
        Properties {
            name: name.map(|name| <Name as TypeMut>::into_owned(name)),
        }
    }
}
#[derive(Debug, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct CountryMut<'a> {
    pub properties: PropertiesMut<'a>,
}
pub type CountryV1Mut<'a> = CountryMut<'a>;
impl TypeMut for CountryMut<'_> {
    type Owned = Country;

    fn into_owned(self) -> Self::Owned {
        Country {
            properties: self.properties.into_owned(),
        }
    }
}
impl<'a> EntityTypeMut<'a> for CountryMut<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a mut Entity) -> Option<Result<Self, Self::Error>> {
        if Self::Owned::ID == value.metadata.entity_type_id {
            return None;
        }
        let properties = PropertiesMut::try_from_value(&mut value.properties.0);
        match turbine::fold_tuple_reports((properties,)) {
            Err(error) => Some(Err(error)),
            Ok((properties,)) => Some(Ok(Self { properties })),
        }
    }
}


---

localhost_3000/alice/property/name.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
///Name
#[derive(Debug, Clone, Serialize)]
pub struct Name(pub Text);
impl Type for Name {
    type Mut < 'a > = NameMut < 'a > where Self : 'a ;
    type Ref < 'a > = NameRef < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/property-type/name/" / v / 1u32);

    fn as_mut(&mut self) -> NameMut<'_> {
        let Self(value) = self;
        NameMut(<Text as Type>::as_mut(value))
    }

    fn as_ref(&self) -> NameRef<'_> {
        let Self(value) = self;
        NameRef(<Text as Type>::as_ref(value))
    }
}
impl PropertyType for Name {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type NameV1 = Name;
///Name
#[derive(Debug, Clone, Serialize)]
pub struct NameRef<'a>(pub <Text as Type>::Ref<'a>);
impl TypeRef for NameRef<'_> {
    type Owned = Name;

    fn into_owned(self) -> Name {
        let Self(value) = self;
        Name(<<Text as Type>::Ref<'a> as TypeRef>::into_owned(value))
    }
}
impl<'a> PropertyTypeRef<'a> for NameRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type NameV1Ref<'a> = NameRef<'a>;
///Name
#[derive(Debug, Serialize)]
pub struct NameMut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeMut for NameMut<'_> {
    type Owned = Name;

    fn into_owned(self) -> Name {
        let Self(value) = self;
        Name(<<Text as Type>::Mut<'a> as TypeMut>::into_owned(value))
    }
}
impl<'a> PropertyTypeMut<'a> for NameMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type NameV1Mut<'a> = NameMut<'a>;
