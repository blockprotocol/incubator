https_blockprotocol_org_alice_property_type_user_id/mod.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Number, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError,
    PropertyType, PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
///User ID
#[derive(Debug, Clone, Serialize)]
pub struct UserId(pub Number);
impl Type for UserId {
    type Mut < 'a > = UserIdMut < 'a > where Self : 'a ;
    type Ref < 'a > = UserIdRef < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 2u32);

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for UserId {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Number as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type UserIdV2 = UserId;
///User ID
#[derive(Debug, Clone, Serialize)]
pub struct UserIdRef<'a>(pub <Number as Type>::Ref<'a>);
impl TypeRef for UserIdRef<'_> {
    type Owned = UserId;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for UserIdRef<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Number as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type UserIdV2Ref<'a> = UserIdRef<'a>;
///User ID
#[derive(Debug, Serialize)]
pub struct UserIdMut<'a>(pub <Number as Type>::Mut<'a>);
impl TypeMut for UserIdMut<'_> {
    type Owned = UserId;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for UserIdMut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Number as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
pub type UserIdV2Mut<'a> = UserIdMut<'a>;
pub mod v1;
pub use v1::UserIdV1;


---

https_blockprotocol_org_alice_property_type_user_id/v1.rs

use error_stack::{Report, Result, ResultExt as _};
use serde::Serialize;
use turbine::{
    types::data::Text, url, DataType, DataTypeMut, DataTypeRef, GenericPropertyError, PropertyType,
    PropertyTypeMut, PropertyTypeRef, Type, TypeMut, TypeRef, VersionedUrlRef,
};
///User ID
#[derive(Debug, Clone, Serialize)]
pub struct UserIdV1(pub Text);
impl Type for UserIdV1 {
    type Mut < 'a > = UserIdV1Mut < 'a > where Self : 'a ;
    type Ref < 'a > = UserIdV1Ref < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("https://blockprotocol.org/@alice/property-type/user-id/" / v / 1u32);

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl PropertyType for UserIdV1 {
    type Error = GenericPropertyError;

    fn try_from_value(value: serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <Text as DataType>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
///User ID
#[derive(Debug, Clone, Serialize)]
pub struct UserIdV1Ref<'a>(pub <Text as Type>::Ref<'a>);
impl TypeRef for UserIdV1Ref<'_> {
    type Owned = UserIdV1;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeRef<'a> for UserIdV1Ref<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Ref<'a> as DataTypeRef<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
///User ID
#[derive(Debug, Serialize)]
pub struct UserIdV1Mut<'a>(pub <Text as Type>::Mut<'a>);
impl TypeMut for UserIdV1Mut<'_> {
    type Owned = UserIdV1;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> PropertyTypeMut<'a> for UserIdV1Mut<'a> {
    type Error = GenericPropertyError;

    fn try_from_value(value: &'a mut serde_json::Value) -> Result<Self, Self::Error> {
        {
            let value = <<Text as Type>::Mut<'a> as DataTypeMut<'a>>::try_from_value(value)
                .change_context(GenericPropertyError::Data);
            value.map(Self)
        }
    }
}
