localhost_3000/alice/entity/country.rs

use alloc::string::String;
use core::marker::PhantomData;

use error_stack::{Report, Result, ResultExt as _};
use hashbrown::HashMap;
use serde::Serialize;
use turbine::{
    entity::Entity, url, BaseUrl, EntityType, EntityTypeMut, EntityTypeRef, GenericEntityError,
    PropertyType as _, PropertyTypeMut as _, PropertyTypeRef as _, Type, TypeMut, TypeRef,
    VersionedUrlRef,
};
///Country
#[derive(Debug, Clone, Serialize)]
pub struct Properties;
impl Properties {
    fn try_from_value(
        mut properties: HashMap<String, serde_json::Value>,
    ) -> Result<Self, GenericEntityError> {
        Ok(Self)
    }
}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct Country {
    pub properties: Properties,
}
pub type CountryV1 = Country;
impl Type for Country {
    type Mut < 'a > = CountryMut < 'a > where Self : 'a ;
    type Ref < 'a > = CountryRef < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/entity-type/country/" / v / 1u32);

    fn as_mut(&mut self) -> Self::Mut<'_> {
        todo!()
    }

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl EntityType for Country {
    type Error = GenericEntityError;

    fn try_from_entity(value: Entity) -> Option<Result<Self, Self::Error>> {
        if Self::ID == value.metadata.entity_type_id {
            return None;
        }
        let properties = Properties::try_from_value(value.properties.0);
        match turbine::fold_tuple_reports((properties,)) {
            Err(error) => Some(Err(error)),
            Ok((properties,)) => Some(Ok(Self { properties })),
        }
    }
}
///Country
#[derive(Debug, Clone, Serialize)]
pub struct PropertiesRef<'a>(pub PhantomData<&'a ()>);
impl<'a> PropertiesRef<'a> {
    fn try_from_value(
        properties: &'a HashMap<String, serde_json::Value>,
    ) -> Result<Self, GenericEntityError> {
        Ok(Self(PhantomData))
    }
}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct CountryRef<'a> {
    pub properties: PropertiesRef<'a>,
}
pub type CountryV1Ref<'a> = CountryRef<'a>;
impl TypeRef for CountryRef<'_> {
    type Owned = Country;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> EntityTypeRef<'a> for CountryRef<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a Entity) -> Option<Result<Self, Self::Error>> {
        if Self::Owned::ID == value.metadata.entity_type_id {
            return None;
        }
        let properties = PropertiesRef::try_from_value(&value.properties.0);
        match turbine::fold_tuple_reports((properties,)) {
            Err(error) => Some(Err(error)),
            Ok((properties,)) => Some(Ok(Self { properties })),
        }
    }
}
///Country
#[derive(Debug, Serialize)]
pub struct PropertiesMut<'a>(pub PhantomData<&'a ()>);
impl<'a> PropertiesMut<'a> {
    fn try_from_value(
        properties: &'a mut HashMap<String, serde_json::Value>,
    ) -> Result<Self, GenericEntityError> {
        Ok(Self(PhantomData))
    }
}
#[derive(Debug, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct CountryMut<'a> {
    pub properties: PropertiesMut<'a>,
}
pub type CountryV1Mut<'a> = CountryMut<'a>;
impl TypeMut for CountryMut<'_> {
    type Owned = Country;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> EntityTypeMut<'a> for CountryMut<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a mut Entity) -> Option<Result<Self, Self::Error>> {
        if Self::Owned::ID == value.metadata.entity_type_id {
            return None;
        }
        let properties = PropertiesMut::try_from_value(&mut value.properties.0);
        match turbine::fold_tuple_reports((properties,)) {
            Err(error) => Some(Err(error)),
            Ok((properties,)) => Some(Ok(Self { properties })),
        }
    }
}
