localhost_3000/alice/entity/country.rs

use blockprotocol::{
    entity::Entity, EntityType, EntityTypeMut, EntityTypeRef, GenericEntityError,
    PropertyType as _, Type, TypeMut, TypeRef, VersionedUrlRef,
};
use error_stack::{Report, Result};
use hashbrown::HashMap;
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct Properties {}
impl Properties {
    fn try_from_value(properties: HashMap<BaseUrl, Value>) -> Result<Self, GenericEntityError> {
        todo!()
    }
}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct Country {
    pub properties: Properties,
}
pub type CountryV1 = Country;
impl Type for Country {
    type Mut < 'a > = CountryMut < 'a > where Self : 'a ;
    type Ref < 'a > = CountryRef < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/entity-type/country/" / v / 1u32);

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }

    fn as_mut(&self) -> Self::Mut<'_> {
        todo!()
    }
}
impl EntityType for Country {
    type Error = GenericEntityError;

    fn try_from_entity(value: Entity) -> Option<Result<Self, Self::Error>> {
        todo!()
    }
}
#[derive(Debug, Clone, Serialize)]
pub struct PropertiesRef<'a> {}
#[derive(Debug, Clone, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct CountryRef<'a> {
    pub properties: PropertiesRef<'a>,
}
impl TypeRef for CountryRef<'_> {
    type Owned = Country;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> EntityTypeRef<'a> for CountryRef<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a Entity) -> Option<Result<Self, Self::Error>> {
        todo!()
    }
}
pub type CountryV1Ref<'a> = CountryRef<'a>;
#[derive(Debug, Serialize)]
pub struct PropertiesMut<'a> {}
#[derive(Debug, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct CountryMut<'a> {
    pub properties: PropertiesMut<'a>,
}
impl TypeMut for CountryMut<'_> {
    type Owned = Country;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> EntityTypeMut<'a> for CountryMut<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a mut Entity) -> Option<Result<Self, Self::Error>> {
        todo!()
    }
}
pub type CountryV1Mut<'a> = CountryMut<'a>;
