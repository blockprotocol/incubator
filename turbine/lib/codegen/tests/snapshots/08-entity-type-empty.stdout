localhost_3000/alice/entity/country.rs

use blockprotocol::{
    entity::Entity, EntityType, EntityTypeRef, GenericEntityError, Type, TypeRef, VersionedUrlRef,
};
use serde::Serialize;
#[derive(Debug, Clone, Serialize)]
pub struct Properties {}
#[derive(Debug, Clone, Serialize)]
pub struct Country {
    properties: Properties,
}
impl Type for Country {
    type Ref < 'a > = CountryRef < 'a > where Self : 'a ;

    const ID: VersionedUrlRef<'static> =
        url!("http://localhost:3000/@alice/types/entity-type/country" / v / 1u32);

    fn as_ref(&self) -> Self::Ref<'_> {
        todo!()
    }
}
impl blockprotocol::EntityType for Country {
    type Error = GenericEntityError;

    fn try_from_entity(value: Entity) -> Result<Self, Self::Error> {
        todo!()
    }
}
pub struct PropertiesRef<'a> {}
#[derive(Debug, Clone, Serialize)]
pub struct CountryRef<'a> {
    properties: PropertiesRef<'a>,
}
impl TypeRef for CountryRef<'_> {
    type Owned = Country;

    fn into_owned(self) -> Self::Owned {
        todo!();
    }
}
impl<'a> EntityTypeRef<'a> for CountryRef<'a> {
    type Error = GenericEntityError;

    fn try_from_entity(value: &'a Entity) -> Result<Self, Self::Error> {
        todo!()
    }
}
pub type CountryV1 = Country;
pub type CountryV1Ref<'a> = Country<'a>;
